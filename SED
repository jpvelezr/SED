
# lifeCycleTime = 30:
# while clock < lifeCycleTime

    TR = 0
    MEP = []

    LEF = Any[[0 1 1] 5 8;[0 1 2] 3 4;[2 1 1] 6 1;[2 1 2] 1 9;[2 2 1] 4 2;[2 2 2] 3 5;
                [3 1 1] 2 4;[0 1 2] 7 1;[3 2 1] 5 9;[3 2 2] 3 3;[3 3 1] 4 4]                # Lista de Eventos Futuros

    EventList = [1;2;1;2;1;2;1;2;1;1;1]                     # Si es falla (1) o mantenimiento (2)
    VPC = [100;100;40;40;60;60;50;50;30;30;20]

    RelEv = Array{Any}(11,1)

    RelEv[1] = 1; RelEv[2] = Any[1]
    RelEv[3] = 2; RelEv[4] = Any[2]
    RelEv[5] = 3; RelEv[6] = Any[3]                         # Matriz de Relacion de Eventos
    RelEv[7] = 4; RelEv[8] = Any[4]
    RelEv[9] = 4; RelEv[10] = 6
    RelEv[11] = 7;

    ID = [LEF[:,1] LEF[:,2] LEF[:,3]]                       # Matriz de ID
    dur = LEF[:,4]                                          # Vector de duraciones
    ocu = LEF[:,5]                                          # Vector de ocurrencias

    prox = find(map(x -> x==minimum(ocu),ocu))              # Encuntra los eventos con próximas ocurrencias
    LEA = LEF[prox,:]                                       # Obtiene la lista de Eventos Actuales

    ocu = float(ocu - LEA[5])                               # Resta la ocurrencia a los eventos futuros

    for i = 1:size(LEA)[1]
        if EventList[prox][i] == 2                          # Pregunta si el evento es falla o mantenimiento
            inst = RelEv[prox][i]; inst = inst[1]           # Si es mantenimiento, encuentra las fallas asociadas
            pos2reinst = find(map(x -> x==inst,RelEv));     # Encuentra la posición de las fallas relacionadas
            for j = 1:length(pos2reinst)
                ocu[pos2reinst[j]] = round(rand(),4)        # Reinstancia las fallas asociadas en LEF
            end
        end
        ocu[prox[i]] = round(rand(),4)                 # Reinstancia eventos de LEA en LEF
    end
    LEF[:,5] = ocu

    haySerie = Array{Any}(size(LEA)[1],1)

    if !isempty(LEA)                            # Pregunta si hay eventos en LEA
        for i = 1:size(LEA)[1]
            if LEA[i,:][1] == 0                 # Recorre LEA y pregunta si hay eventos asociados a equipos serie
                haySerie[i] = 1                 # Asigna 1 si encuentra eventos asociados a equipos serie
            else
                haySerie[i] = 0                 # Asigna 0 si encuentra eventos asociados a equipos serie
            end
        end
        for i = 1:size(LEA)[1]
            if LEA[i,:][1] == 0
                posSerie = find(map(x -> x==1,haySerie))    # Busca posiciones de LEA en donde hay eventos asociados a equipos serie
                durSeries = LEA[posSerie,:][:,4]                             # Encuentra eventos asociados a equipos serie
                durAlm = maximum(durSeries)                           # Almacena la mayor duración de los eventos serie
                posSerieMayor = find(map(x -> x==durAlm,durSeries))
                SerieMayor = LEA[posSerieMayor,:]                       # Encuentra el evento serie de mayor duración
                ID = [SerieMayor[1] SerieMayor[2] SerieMayor[3]]        # ID del evento serie de mayor duración
                Oc = SerieMayor[5]; Du = SerieMayor[4]               # Ocurrencia y Duración del evento serie de mayor duración

                PC = 40;             # CAMBIO
                TI = TR + Oc;
                TF = TI + Du;                                       # Registro del evento serie en MEP
                TR = TF;
                push!(MEP,[ID TI TF PC])
                #LEA[setdiff(1:end, posSerieMayor)]
            else
                #FuncionParalelo                 # Asigna 0 si encuentra eventos asociados a equipos serie
            end
        end
    end
#end
